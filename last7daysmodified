ðŸ”§ **Shell Script for Directory and File Management in Production** ðŸ”§

In the fast-paced world of **production support**, automation is a game-changer! Here's a simple yet powerful **Shell Script** I wrote to efficiently manage directories and handle file operations. This script does the following:

### **Key Features:**
1. **Directory Check**: Verifies if the given directory exists.
2. **File Operations**:
   - Lists files modified in the last 7 days.
   - Allows the user to delete multiple files interactively.
3. **Dynamic Directory Creation**: Offers to create a directory if it doesnâ€™t exist.

### **Code Walkthrough:**
```bash
read -p "Enter the directory path: " path

if [ -d "$path" ]; then
  # Find files modified in the last 7 days
  find "$path" -mtime -7 -type f
  
  # Ask if the user wants to delete any files
  read -p "Do you want to delete any files? (yes/no) " choice
  if [ "$choice" == "yes" ]; then
    # Get a list of filenames to delete
    read -p "Enter the file names to delete (space-separated): " -a filenames
    
    # Loop through each file and delete it
    for filename in "${filenames[@]}"; do
      # Check if file exists and then delete
      if [ -f "$path/$filename" ]; then
        rm "$path/$filename"
        echo "$filename deleted."
      else
        echo "$filename does not exist in the directory."
      fi
    done
  fi

else
  # If the directory doesn't exist, ask to create it
  read -p "Do you want to create the directory? (yes/no) " ch
  if [ "$ch" == "yes" ]; then
    mkdir -p "$path"
    echo "Directory created."
  fi
fi
```

### **Why Is This Script Valuable?**  
âœ… **Efficient File Management**: Automatically handles file deletion, reducing manual intervention.  
âœ… **User-Friendly**: Interactive prompts allow users to easily perform tasks.  
âœ… **Automation**: Streamlines common file operations, helping you focus on more critical tasks in production environments.

### **Real-World Impact**  
By using **Shell Scripting** for automation, you not only save time but also ensure smoother operations, especially when managing large volumes of data and files in **production support environments**. This is exactly the kind of automation that **DevOps** and **Linux Admins** rely on for managing systems and infrastructure.

### **Takeaway**:  
With a few lines of code, you can create highly effective and user-friendly scripts that handle directory and file management tasks seamlessly!

#ShellScripting #Automation #UNIX #Linux #DevOps #ProductionSupport #FileManagement #TechAutomation
